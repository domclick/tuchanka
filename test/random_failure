#!/bin/bash
# safe bash
set -o errexit -o noclobber -o nounset -o pipefail -o xtrace

readonly root_dir="$(dirname "${BASH_SOURCE[0]}")/.."
. "${root_dir}/load_config.bash"

. "${lib_dir}/power_on.bash"
. "${lib_dir}/power_off.bash"
. "${lib_dir}/rollback.bash"

cluster_hb1[$Cluster1]="'${heartbeat_dir}/heart1a'"
cluster_hb2[$Cluster1]="'${heartbeat_dir}/heart1b'"
cluster_hb1[$Cluster2]="'${heartbeat_dir}/heart2'"
cluster_hb2[$Cluster2]="'${heartbeat_dir}/reader2'"
cluster_hb1[$Cluster3]="'${heartbeat_dir}/heart3'"
cluster_hb2[$Cluster3]="'${heartbeat_dir}/reader3'"
cluster_hb1[$Cluster4]="'${heartbeat_dir}/heart4'"
cluster_hb2[$Cluster4]="'${heartbeat_dir}/reader4'"
readonly -a cluster_hb1 cluster_hb2
declare -a pane_hb1 pane_hb2 pane_mon_host pane_log pane_top pane_mon pane_test


if ! tmux has-session -t tuchanka_test_random_failure
then
	tmux new-session -d -s tuchanka_test_random_failure -n tuchanka_test_random_failure -x $COLUMNS -y $LINES
	tmux set-option mouse on
	tmux set-option status off
	tmux set-window-option remain-on-exit on
	declare -i n=${#cluster_dbs[@]}
	for c in ${!cluster_dbs[@]}
	do
		pane_test[$c]="$(tmux display-message -p '#{pane_id}')"
		if [ $n -gt 1 ]
		then
			tmux split-window -h -p $((100-100/n))
			let n-=1
		fi
	done; unset c n
	for c in ${!cluster_dbs[@]}
	do
		tmux respawn-pane -t "${pane_test[$c]}" -k "'${test_dir}/random_failure1' ${c} 3>'${test_dir}/test${c}.log' 4>'${test_dir}/monitor${c}'"
		pane_mon[$c]="$(tmux split-window -t "${pane_test[$c]}" -P -F '#{pane_id}' -v -b -l $((41+5+5)) true)"
		pane_top[$c]="$(tmux split-window -P -F '#{pane_id}' -v -b -l $((5+5)) true)"
		pane_log[$c]="$(tmux split-window -P -F '#{pane_id}' -v -b -l 5 "cat '${test_dir}/test${c}.log'")"
		pane_hb1[$c]="$(tmux split-window -P -F '#{pane_id}' -h -b -l 10 "${cluster_hb1[$c]}")"
		pane_hb2[$c]="$(tmux split-window -P -F '#{pane_id}' -v -l 3 "${cluster_hb2[$c]}")"
		pane_mon_host[$c]="$(tmux split-window -P -F '#{pane_id}' -v -l 1 \
			"'${test_dir}/random_failure_monitor_switcher' '${pane_mon[$c]}' '${pane_top[$c]}' <'${test_dir}/monitor${c}'")"
	done; unset c
	tmux select-pane -t "${pane_mon[$Cluster3]}"

	rollback 'setup' "${vm_name[$Witness]}"
	power_on "${vm_name[$Witness]}"
fi

tmux attach-session -t tuchanka_test_random_failure
# Finish, cleanup
if ! tmux has-session -t tuchanka_test_random_failure
then
	power_off
fi

exit 0
