#!/bin/bash
# safe bash
set -o errexit -o noclobber -o nounset -o pipefail -o xtrace

readonly root_dir="$(dirname "${BASH_SOURCE[0]}")/.."
. "${root_dir}/load_config.bash"

. "${lib_dir}/power_on.bash"
. "${lib_dir}/power_off.bash"
. "${lib_dir}/rollback.bash"
. "${lib_dir}/count_words.bash"

# $@ список кластеров, которые надо протестировать, если пустой, то все
readonly clusters="${*:-${!cluster_dbs[*]}}"
declare -a pane_hb1 pane_hb2 pane_log pane_mon pane_test


if ! tmux has-session -t tuchanka_test_random_failure
then
	declare -i n=$(count_words $clusters)
	tmux new-session -d -s tuchanka_test_random_failure -n tuchanka_test_random_failure -x $COLUMNS -y $LINES
	tmux set-option mouse on
	tmux set-option status off
	tmux set-window-option remain-on-exit on
	for c in $clusters
	do
		pane_test[$c]="$(tmux display-message -p '#{pane_id}')"
		if [ $n -gt 1 ]
		then
			tmux split-window -h -p $((100-100/n))
			let n-=1
		fi
	done; unset c
	for c in $clusters
	do
		tmux respawn-pane -t "${pane_test[$c]}" -k "'${test_dir}/random_failure1' ${c} '${pane_test[$c]}'"
	done; unset c

	rollback 'setup' ${cluster_vms[$Group0]}
	power_on ${cluster_vms[$Group0]}
fi

tmux attach-session -t tuchanka_test_random_failure
# Finish, cleanup
if ! tmux has-session -t tuchanka_test_random_failure
then
	hosts="${cluster_vms[$Group0]}"
	for c in $clusters
	do
		hosts="${hosts} ${cluster_vms[$c]}"
	done
	power_off $hosts
	unset hosts
fi

exit 0
