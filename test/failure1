#!/bin/bash
# Copyright Ⓒ 2020 "Sberbank Real Estate Center" Limited Liability Company.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# safe bash
set -o errexit -o noclobber -o nounset -o pipefail -o xtrace

readonly root_dir="$(dirname "${BASH_SOURCE[0]}")/.."
. "${root_dir}/load_config.bash"

. "${lib_dir}/tick.bash"
. "${lib_dir}/random_word.bash"
. "${lib_dir}/first_vm.bash"
. "${lib_dir}/first_word.bash"
. "${lib_dir}/now.bash"
. "${lib_dir}/rollback.bash"
. "${lib_dir}/power_on.bash"
. "${lib_dir}/power_off.bash"
. "${lib_dir}/shut_down.bash"
. "${lib_dir}/wait_healthy.bash"
. "${lib_dir}/wait_ready.bash"
. "${lib_dir}/wait_stable.bash"
. "${lib_dir}/wait_qdevice.bash"
. "${lib_dir}/tmux.bash"
. "${lib_dir}/heartbeat.bash"

# Индекс кластера
# не ставлю readonly из-за странного конфликта с декларированием local переменных в функциях
c="$1"

# у нижеопрепределяемых функций
# $1 VM name of the node to test
break_node=()
# Reset node
function Reset {
	VBoxManage controlvm "${vm_name[$1]}" reset
}
readonly -f Reset
# PowerOff node
function PowerOff {
	power_off $1
}
readonly -f PowerOff
# ShutDown node
function ShutDown {
	shut_down $1
}
readonly -f ShutDown
# Unlink node (net isolation)
function UnLink {
	VBoxManage controlvm "${vm_name[$1]}" setlinkstate1 off
}
readonly -f UnLink
# Postgres-KILL
function Postgres-KILL {
	vm_ssh $1 "killall -KILL postgres"
}
readonly -f Postgres-KILL
# Postgres-STOP
function Postgres-STOP {
	vm_ssh $1 "killall -STOP postgres"
}
readonly -f Postgres-STOP
# SBD-STOP (test watchdog)
function SBD-STOP {
	vm_ssh $1 "killall -STOP sbd"
	sleep 5 # watchdog timer
}
readonly -f SBD-STOP
# Fork Bomb (test "out of memory")
function ForkBomb {
	# После форк бомбы ssh дисконнектит с ненулевым кодом возврата, игнорю
	vm_ssh $1 -o 'ServerAliveInterval 5' -o 'ServerAliveCountMax 1' ':(){ :|:& };:&' || true
	sleep 5
}
readonly -f ForkBomb
# Test out of disk space
function OutOfSpace {
	local h=$1
	local c=${vm_group[$h]}
	local db=$(first_word ${cluster_dbs[$c]})
	local master="${float_ip[$db]}:${db_port[$db]}"
	# Может завершать работу с ненулевым возвратом, игнорю
	vm_ssh $1 "f=\"\$(mktemp)\";exec 3>\"\$f\";rm \"\$f\"; cat /dev/zero >&3;
	psql --no-psqlrc --quiet --dbname='postgresql://heartbeat:ChangeMe@${master}/heartbeat?application_name=failure&target_session_attrs=read-write'\
	--command='CREATE TEMPORARY TABLE blob ON COMMIT DROP AS SELECT generate_series(1,1000000);';" || true
}
readonly -f OutOfSpace

# Here can be commented out unnessesary tests
break_node+=('Reset')
break_node+=('PowerOff')
break_node+=('ShutDown')
break_node+=('UnLink')
break_node+=('Postgres-KILL')
break_node+=('Postgres-STOP')
break_node+=('SBD-STOP')
break_node+=('ForkBomb')
break_node+=('OutOfSpace')
readonly -a break_node

# Setup tmux panes
readonly pane_reactions_height=$((${#break_node[*]}+3)) pane_hb_height=2 pane_hb_width=10 pane_mon_heignt=41
readonly pane_test="${TMUX_PANE}"
readonly pane_mon="$(tmux split-window -t "${pane_test}" -P -F '#{pane_id}' -v -b \
	-l $((${pane_mon_heignt}+${pane_hb_height}+1+${pane_hb_height}+1+${pane_reactions_height})) '')"
# for function tick
readonly tick_destination="$(tmux split-window -t "${pane_mon}" -P -F '#{pane_id}' -v -b \
	-l $((${pane_hb_height}+1+${pane_hb_height}+1+${pane_reactions_height})) '')"
readonly pane_reactions="$(tmux split-window -t "${tick_destination}" -P -F '#{pane_id}' -v -b -d \
	-l ${pane_reactions_height} '')"
readonly pane_hb1="$(tmux split-window -t "${tick_destination}" -P -F '#{pane_id}' -h -b \
	-l ${pane_hb_width} "${cluster_hb1[$c]}")"
readonly pane_hb2="$(tmux split-window -t "${pane_hb1}" -P -F '#{pane_id}' -v \
	-l ${pane_hb_height} "${cluster_hb2[$c]}")"

# test defined cluster for defined failure
# $1 fault ID (break_node array index)
function test_node {
	local f=$1
	local h unbroken time
	# random node from the cluster
	h=$(random_word ${cluster_vms[$c]})
	# Can be used to test only the first node in the cluster
	# h=$(first_word ${cluster_vms[$c]})
	for unbroken in ${cluster_vms[$c]}
	do
		if [ $unbroken -ne $h ]
		then
			break
		fi
	done;
	tmux respawn-pane -t "${pane_mon}" -k "'${lib_dir}/vm_ssh' ${unbroken} -t 'crm_mon -rDfAi 0.1'"
	wait_healthy $c
	tick+ "${break_node[$f]} ${vm_name[$h]}"
	time=$(now) # засекаю время
	${break_node[$f]} $h
	sleep 5 # some time to propagate events
	tick "Ready? tuchanka${c}"
	wait_ready $c
	time=$(($(now)-$time))
	tick "${break_node[$f]} reaction ${time}s"
	# Обновляю pane
	echo -ne '\033[H\033[J'|tmux display-message -t "${pane_reactions}" -I
	local db=$(first_word ${cluster_dbs[$c]})
	local master="${float_ip[$db]}:${db_port[$db]}"
	# Вывожу таблицу с временем реагирования
	psql --no-psqlrc --quiet --pset=footer=off \
		--dbname="postgresql://heartbeat:ChangeMe@${master}/heartbeat?application_name=failure&target_session_attrs=read-write" \
		--command="INSERT INTO reactions (failure,reaction) VALUES ('${break_node[$f]}',${time});
			SELECT failure,round(avg(reaction)) as reaction,round(stddev_samp(reaction)) as deviation,count(*) as count FROM reactions GROUP BY failure ORDER BY failure" \
		| tr -s '\n' | tmux display-message -t "${pane_reactions}" -I
	tick "Fix ${vm_name[$h]}"
	wait_stable $c $h
	power_off $h
	# запоминаю время, должна быть пауза не меньше 60, чтобы пропали сообщения о фенсинге
	time=$(now)
	VBoxManage modifyvm "${vm_name[$h]}" --cableconnected1 on
	power_on $h
	wait_ready $c
	time=$(($(now)-$time))
	sleep $((60-$time))
	vm_ssh $h '/root/bin/restore'
}
readonly -f test_node

for h in ${cluster_vms[$c]}
do
	tmux split-window -t "${pane_test}" -v -b -l 4 "while true; do '${lib_dir}/vm_ssh' ${h} -t -o 'ConnectTimeout 1' -o 'ServerAliveInterval 1' -o 'ServerAliveCountMax 1' 'HTOPRC=~/.config/htop/tuchanka.htoprc htop'; done"
done

# Start VM
tick "Rollback tuchanka${c}"
rollback 'setup' ${cluster_vms[$c]}
tick "Boot tuchanka${c}"
power_on ${cluster_vms[$c]}
tick "Wait for quorum device"
wait_qdevice
tick "Start tuchanka${c}"
vm_ssh $(first_vm $c) 'pcs cluster start --all'

# check all failure
for f in ${!break_node[@]}
do
	test_node $f
done;unset f

# random failure
while true
do
	f=$(random_word ${!break_node[@]})
	test_node $f
done;unset f
