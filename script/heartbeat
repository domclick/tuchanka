#!/bin/bash
# safe bash
set -o errexit -o noclobber -o nounset -o pipefail

# get config
readonly script_dir="$(dirname "${BASH_SOURCE[0]}")"
. "${script_dir}/load_config.bash"
. "${script_dir}/vm_ssh.bash"

if $autoVirtualBox
then
	. "${script_dir}/rollback.bash"
	. "${script_dir}/start_vms.bash"
	. "${script_dir}/snapshot.bash"
fi

if $autoVirtualBox
then
	rollback 'configure'
	start_vms
else
	echo 'При автоматической установке здесь происходит откат к snapshot, который был создан после настройки pacemaker.'
fi

# цикл по кластерам, первичная настройка
for k in "${!krogan_cluster[@]}"
do
	# Нужен любой hostname из кластера для ssh доступа
	h="${vm_hostname[${db_master[$k]}]}"
	vm_ssh "$h" 'pcs cluster start --all'
done

# И строго говоря надо сначала надо убедиться что postgresql встал и есть плавающий ip и работать через плавающий ip.
# Но из-за проблем с отсутствием аутентификации (на данном этапе), работать буду через ssh и peer аутентификацию.
# Цикл по DB
for k in "${!db_master[@]}"
do
	pgport="${db_port[$k]}"
	float_master="${float_hostname[$k]}"
	master="${vm_hostname[${db_master[$k]}]}"
	echo "Install heartbeat into ${master}"
	echo "Waiting for ping ${float_master}"
	while ! ping -q -c 1 "${float_master}"
	do
		sleep 1
	done
	vm_ssh "$master" "psql --port=${pgport} postgres postgres" <"${heartbeat_dir}/heartbeat.sql"
done

# цикл по кластерам, завершение перед выключением
for k in "${!krogan_cluster[@]}"
do
	# Нужен любой hostname из кластера для ssh доступа
	h="${vm_hostname[${db_master[$k]}]}"
	vm_ssh "$h" "pcs cluster stop --all"
done

if $autoVirtualBox
then
	snapshot 'heartbeat' 'The snapshot was taken at the end of the "heartbeat" script.'
else
	echo 'При автоматической установке здесь сохраняется snapshot с установленной БД "heartbeat".'
fi

exit 0
