#!/bin/bash
# Copyright Ⓒ 2020 "Sberbank Real Estate Center" Limited Liability Company.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# safe bash
set -o errexit -o noclobber -o nounset -o pipefail -o xtrace

# get config
readonly root_dir="$(dirname "${BASH_SOURCE[0]}")/.."
. "${root_dir}/load_config.bash"
. "${lib_dir}/vm_ssh.bash"
. "${lib_dir}/tmux.bash"
. "${lib_dir}/cleanup.bash"

# create_vms

# check command line arguments
if [ $# -ne 2 ]
then
	echo -e "Usage:\n\t $0 <redhat_installation_image.iso> <ssh_public_key_file>" 1>&2
	exit 1
fi
dvd_iso="$1"
echo "Check installation image \"${dvd_iso}\""
eval $(VBoxManage unattended detect --iso "${dvd_iso}" --machine-readable)
if [ "$OSTypeId" = 'RedHat_64' -a "$OSVersion" = '7' ]
then
	echo "The installation image \"${dvd_iso}\" is Ok"
else
	echo "Error: The installation image must be RedHat 7 64bit or so like (CentOS, for instance)" 1>&2
	exit 2
fi
ssh_public_key="$2"
echo "Check ssh public key \"${ssh_public_key}\""
if [ -r "${ssh_public_key}" ]
then
	ssh_fingerprint="$(ssh-keygen -l -f "${ssh_public_key}" | cut -d ' ' -f 2)"
else
	echo "Error: The ssh public key file is not readable" 1>&2
	exit 3
fi

# generate config files for other scripts
# create ssh_config (with check of clean installation)
if [ -e "${ssh_config}" -o -e "${etc_hosts}" -o -e "${ssh_known_hosts}" ]
then
	echo "Config files already exist, the installation is not clean"
	"${setup_dir}/destroy_vms"
fi
# keep fingerprint of ssh inside ssh_config comments
echo "${vm_ssh_add_key_prefix}${ssh_fingerprint}" >"${ssh_config}"
unset ssh_fingerprint
# add key to the ssh-agent, if abscent
vm_ssh_add
ssh_hosts=''
for h in "${!vm_name[@]}"
do
	echo -e "Host ${vm_name[$h]}\n\tHostName ${vm_ip[$h]}"
	ssh_hosts+=" ${vm_name[$h]}"
done >>"${ssh_config}";unset h
cat <<EOF >>"${ssh_config}"
Host${ssh_hosts}
	ForwardAgent yes
	ForwardX11 no
	AddKeysToAgent yes
	AddressFamily inet
	BatchMode yes
	BindAddress ${vboxnet_hostip}
	CanonicalizeHostname no
	CheckHostIP yes
	Compression no
	HashKnownHosts no
	LogLevel ERROR
	RequestTTY no
	StrictHostKeyChecking yes
	User root
	TCPKeepAlive yes
	ServerAliveCountMax 3
	ServerAliveInterval 5
EOF
unset ssh_hosts
# generate etc_hosts file
for h in "${!vm_name[@]}"
do
	echo -e "${vm_ip[$h]}\t${vm_name[$h]} ${vm_name[$h]}.${vm_domain}"
done > "${etc_hosts}";unset h
for db in "${!float_ip[@]}"
do
	echo -e "${float_ip[$db]}\t${float_name[$db]} ${float_name[$db]}.${vm_domain}"
done >> "${etc_hosts}";unset db
echo -e "${vboxnet_hostip}\tvirtualbox" >> "${etc_hosts}"

# Подсетка кластера
echo 'Create a network interface for the host'
# get name for hostonlyif, if exists
vboxnet_if="$(VBoxManage list hostonlyifs|
	tr '\n' '§'|sed -nE "/^.*Name:[[:space:]]+([[:alnum:]]+)§GUID:[^§]+§DHCP:[^§]+§IPAddress:[[:space:]]+${vboxnet_hostip//./\.}§.*$/ s//\1/p")"
if [ -z "${vboxnet_if}" ]
then
	# Создаю интерфейс для hostonly сети и запоминаю имя:
	vboxnet_if="$(VBoxManage hostonlyif create |
		sed -E "s/Interface '(vboxnet[0-9]+)' was successfully created/\1/")"
	# Назначаю IP хосту
	VBoxManage hostonlyif ipconfig "${vboxnet_if}" --ip "${vboxnet_hostip}"
	echo "created vboxnet_if=>${vboxnet_if}"
else
	echo "vboxnet_if=>${vboxnet_if} already exists" 1>&2
fi
# будет использоваться при распараллеленной инсталяции
export dvd_iso ssh_public_key vboxnet_if

trap cleanup EXIT
tmux_init
declare -i n=${#vm_name[@]} i=0
for h in "${!vm_name[@]}"
do
	tmux respawn-pane -k "sleep $i && '${setup_dir}/create1' $h"
	if [ $n -gt 1 ]
	then
		tmux split-window -h -p $((100-100/n))
		let n-=1
	fi
	let i+=1
done; unset h n i
tmux select-layout tiled
tmux_attach
# Наличине скриншота create будет маркером, что распараллелеиная установка пакетов отработала нормально.
exec "${setup_dir}/install"
# cleanup by trap on error
