#!/bin/bash
# safe bash
set -o errexit -o noclobber -o nounset -o pipefail -o xtrace

# get config
readonly root_dir="$(dirname "${BASH_SOURCE[0]}")/.."
. "${root_dir}/load_config.bash"
. "${lib_dir}/vm_ssh.bash"

if ! tmux has-session -t tuchanka_install_soft
then
	# create_vms
	if $autoVirtualBox
	then
		# check command line arguments
		if [ $# -ne 2 ]
		then
			echo -e "Usage:\n\t $0 <redhat_installation_image.iso> <ssh_public_key_file>" 1>&2
			exit 1
		fi
		dvd_iso="$1"
		echo "Check installation image \"${dvd_iso}\""
		eval $(VBoxManage unattended detect --iso "${dvd_iso}" --machine-readable)
		if [ "$OSTypeId" = 'RedHat_64' -a "$OSVersion" = '7' ]
		then
			echo "The installation image \"${dvd_iso}\" is Ok"
		else
			echo "Error: The installation image must be RedHat 7 64bit or so like (CentOS, for instance)" 1>&2
			exit 2
		fi
		ssh_public_key="$2"
		echo "Check ssh public key \"${ssh_public_key}\""
		if [ -r "${ssh_public_key}" ]
		then
			ssh_fingerprint="$(ssh-keygen -l -f "${ssh_public_key}" | cut -d ' ' -f 2)"
		else
			echo "Error: The ssh public key file is not readable" 1>&2
			exit 3
		fi
	fi

	# generate config files for other scripts
	# create ssh_config (with check of clean install)
	if [ -e "${ssh_config}" -o -e "${etc_hosts}" -o -e "${ssh_known_hosts}" ]
	then
		echo "Config files already exist, install is not clean"
		"${setup_dir}/destroy_vms"
	fi
	# keep fingerprint of ssh inside ssh_config comments
	echo "${vm_ssh_add_key_prefix}${ssh_fingerprint}" >"${ssh_config}"
	unset ssh_fingerprint
	# add key to the ssh-agent, if abscent
	vm_ssh_add
	ssh_hosts=''
	for h in "${!vm_name[@]}"
	do
		echo -e "Host ${vm_name[$h]}\n\tHostName ${vm_ip[$h]}"
		ssh_hosts+=" ${vm_name[$h]}"
	done >>"${ssh_config}";unset h
	cat <<-EOF >>"${ssh_config}"
	Host${ssh_hosts}
		ForwardAgent yes
		ForwardX11 no
		AddKeysToAgent yes
		AddressFamily inet
		BatchMode yes
		BindAddress ${vboxnet_hostip}
		CanonicalizeHostname no
		CheckHostIP yes
		Compression no
		HashKnownHosts no
		LogLevel ERROR
		RequestTTY no
		StrictHostKeyChecking yes
		User root
		TCPKeepAlive yes
	EOF
	unset ssh_hosts
	# generate etc_hosts file
	for h in "${!vm_name[@]}"
	do
		echo -e "${vm_ip[$h]}\t${vm_name[$h]} ${vm_name[$h]}.tuchanka"
	done > "${etc_hosts}";unset h
	for db in "${!float_ip[@]}"
	do
		echo -e "${float_ip[$db]}\t${float_name[$db]} ${float_name[$db]}.tuchanka"
	done >> "${etc_hosts}";unset db
	echo -e "${vboxnet_hostip}\tvirtualbox virtualbox.tuchanka" >> "${etc_hosts}"

	if $autoVirtualBox
	then
		# Подсетка кластера
		echo 'Create a network interface for the host'
		# get name for hostonlyif, if exists
		vboxnet_if="$(VBoxManage list hostonlyifs|
			tr '\n' '§'|sed -nE "/^.*Name:[[:space:]]+([[:alnum:]]+)§GUID:[^§]+§DHCP:[^§]+§IPAddress:[[:space:]]+${vboxnet_hostip//./\.}§.*$/ s//\1/p")"
		if [ -z "${vboxnet_if}" ]
		then
			# Создаю интерфейс для hostonly сети и запоминаю имя:
			vboxnet_if="$(VBoxManage hostonlyif create |
				sed -E "s/Interface '(vboxnet[0-9]+)' was successfully created/\1/")"
			# Назначаю IP хосту
			VBoxManage hostonlyif ipconfig "${vboxnet_if}" --ip "${vboxnet_hostip}"
			echo "created vboxnet_if=>${vboxnet_if}"
		else
			echo "Error: vboxnet_if=>${vboxnet_if} already exists" 1>&2
			exit 5
		fi
		# будет использоваться при распараллеленной инсталяции
		export dvd_iso ssh_public_key vboxnet_if
	fi
	tmux new-session -d -s tuchanka_install_soft -n tuchanka_install_soft -x $COLUMNS -y $LINES
	tmux set-option mouse on
	tmux set-option status off
	# may be need for debug
	# tmux set-window-option remain-on-exit on

	declare -i n=${#vm_name[@]} i=0
	for h in "${!vm_name[@]}"
	do
		tmux respawn-pane -k "sleep $i && '${setup_dir}/install1' $h"
		if [ $n -gt 1 ]
		then
			tmux split-window -h -p $((100-100/n))
			let n-=1
		fi
		let i+=1
	done; unset h n i
	tmux select-layout tiled
	tmux select-pane -t '0'
fi

tmux attach-session -t tuchanka_install_soft
# Наличине скриншота install будет маркером, что распараллелеиная установка пакетов отработала нормально

if ! tmux has-session -t tuchanka_install_soft
then
	exec "${setup_dir}/setup"
fi
