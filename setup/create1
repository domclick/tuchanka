#!/bin/bash
# Copyright Ⓒ 2020 "Sberbank Real Estate Center" Limited Liability Company.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# Создает и настраивает виртуалки после их создания
# Используется как один из параллельных сопроцессов в setup/create
# safe bash
set -o errexit -o noclobber -o nounset -o pipefail -o xtrace -o errtrace
# $1 ID виртуалки, с которой работать
h="$1"
# get config
readonly root_dir="$(dirname "${BASH_SOURCE[0]}")/.."
. "${root_dir}/load_config.bash"

. "${lib_dir}/vm_ssh.bash"
. "${lib_dir}/snapshot.bash"
. "${lib_dir}/is_snapshot.bash"
. "${lib_dir}/tmux.bash"
. "${lib_dir}/vboxvm_dir.bash"

# Виртуалки
echo "Create ${vm_name[$h]}"
VBoxManage createvm --name "${vm_name[$h]}" --groups "/Tuchanka/Tuchanka${vm_group[$h]}" --ostype RedHat_64 --register
# get host dir
vboxvm_vdi="$(vboxvm_dir $h)/${vm_name[$h]}.vdi"
if [ $h -eq $Witness ]
then
	# vboxnet_if экспортирована в родительском скрипте
	# На witness две виртуалки, одна для выхода в интернет для ntp и http proxy
	VBoxManage modifyvm "${vm_name[$h]}" --description "${vm_desc[$h]}" --memory $RAM_MiB --vram=$VRAM_MiB --boot1 dvd --boot2 disk --boot3 none --boot4 none --rtcuseutc on --graphicscontroller vmsvga --firmware bios --defaultfrontend headless --nic1 hostonly --nictype1 virtio --hostonlyadapter1 "${vboxnet_if}" --nic2 nat --nictype2 virtio --mouse ps2 --keyboard ps2 --audio none --cpus $CPUs --cpuexecutioncap $CPU_execution_cap --iconfile "${root_dir}/images/krogan.png"
else
	VBoxManage modifyvm "${vm_name[$h]}" --description "${vm_desc[$h]}" --memory $RAM_MiB --vram=$VRAM_MiB --boot1 dvd --boot2 disk --boot3 none --boot4 none --rtcuseutc on --graphicscontroller vmsvga --firmware bios --defaultfrontend headless --nic1 hostonly --nictype1 virtio --hostonlyadapter1 "${vboxnet_if}" --mouse ps2 --keyboard ps2 --audio none --cpus $CPUs --cpuexecutioncap $CPU_execution_cap --iconfile "${root_dir}/images/krogan.png"
fi
VBoxManage setextradata "${vm_name[$h]}" 'GUI/ScaleFactor' 2
VBoxManage createmedium disk --filename "${vboxvm_vdi}" --size $HDD_MiB
# reasonable, but unstable
# VM finishes with error in log
# AIOMgr: Host limits number of active IO requests to 16. Expect a performance impact.
# VBoxManage storagectl "${vm_name[$h]}" --name 'DiskController' --add sas --hostiocache off --bootable on
# workaround
VBoxManage storagectl "${vm_name[$h]}" --name 'DiskController' --add sas --hostiocache on --bootable on
# кэширование образа dvd для ускорения установки
VBoxManage storagectl "${vm_name[$h]}" --name 'DVDController' --add sata --hostiocache on --bootable on
VBoxManage storageattach "${vm_name[$h]}" --storagectl 'DiskController' --type hdd --port 0 --device 0 --medium "${vboxvm_vdi}"
VBoxManage storageattach "${vm_name[$h]}" --storagectl 'DVDController' --type dvddrive --port 0 --device 0 --medium "${dvd_iso}"
VBoxManage unattended install "${vm_name[$h]}" --iso="${dvd_iso}" --full-user-name="${vm_ip[$h]}" --locale='ru_RU' --time-zone="${time_zone}" --hostname="${vm_name[$h]}.${vm_domain}" --package-selection-adjustment='minimal' --script-template="${setup_dir}/redhat.kickstart" --post-install-command="mkdir -m 700 \"\${MY_TARGET}/root/.ssh\" && echo '$(cat "${ssh_public_key}")' >>\"\${MY_TARGET}/root/.ssh/authorized_keys\"" --start-vm='headless' --extra-install-kernel-parameters='net.ifnames=0 biosdevname=0 ks=cdrom:/ks.cfg'
echo "Created ${vm_name[$h]}"

# Жду завершение установки, записываю публичный ключ хоста
echo "Waiting for ssh on ${vm_name[$h]}"
# ssh-keyscan иногда возвращает при ошибках код отличный от 0, иногда нет.
while true
do
	ssh_key="$(ssh-keyscan -t ssh-ed25519 "${vm_ip[$h]}" 2>/dev/null || true)"
	[ -n "${ssh_key}" ] && break
	sleep 5
done;
# Чтобы не было конкурентной записи в файл ставлю блокировку в tmux
tmux wait-for -L tuchanka_create_vm_lock_ssh_known_hosts
echo "${ssh_key}" >>"${ssh_known_hosts}"
tmux wait-for -U tuchanka_create_vm_lock_ssh_known_hosts
unset ssh_key

# rename hostname, remove fake domain
vm_ssh $h "echo '${vm_name[$h]}' >|/etc/hostname"
# add etc_hosts to /etc/hosts
vm_ssh $h 'cat >>/etc/hosts' <"${etc_hosts}"
# Русская локаля с английским текстом
vm_ssh $h 'localectl set-locale LANG=ru_RU.UTF-8 LC_MESSAGES=en_US.UTF-8 LANGUAGE=en'

# Наличине скриншота create будет маркером, что распараллелеиное создание виртуалок отработало нормально
snapshot 'create' 'The snapshot was taken at the end of the "create" script.' $h

tmux set-option -p -t "${TMUX_PANE}" remain-on-exit off
exit 0
